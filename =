-- Version
Ver = "v1.0.82"
Upd = "changes to pickup/drop system."

-- Place Check
if game.PlaceId ~= 70876832253163 then
	return
end

-- Services
Players = game:GetService("Players")
ReplicatedStorage = game:GetService("ReplicatedStorage")
RunService = game:GetService("RunService")
SoundService = game:GetService("SoundService")

-- Stop Scripts
ReplicatedStorage:WaitForChild("Client")
	:WaitForChild("Handlers")
	:WaitForChild("DraggableItemHandlers")
	:WaitForChild("ClientDraggableObjectHandler").Enabled =
	false
ReplicatedStorage:WaitForChild("Client")
	:WaitForChild("Handlers")
	:WaitForChild("DraggableItemHandlers")
	:WaitForChild("ClientToolObjectHandler").Enabled =
	false
ReplicatedStorage:WaitForChild("Client")
	:WaitForChild("Handlers")
	:WaitForChild("DraggableItemHandlers")
	:WaitForChild("ClientObjectStorageHandler").Enabled =
	false
ReplicatedStorage:WaitForChild("Client")
	:WaitForChild("Handlers")
	:WaitForChild("DraggableItemHandlers")
	:WaitForChild("ClientActivatableObjectHandler").Enabled =
	false

-- Wait For Game
repeat
	task.wait()
until game:IsLoaded()

-- Main Variables
LatestVersion = string.match(
	game:HttpGet("https://raw.githubusercontent.com/dhjasujfhasdfgsdyufgsdfusjfhdsfsadgfhja/-/refs/heads/main/%2B"),
	"%S+"
)
LocalPlayer = Players.LocalPlayer
Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
ItemFunctions = {}

-- Asset IDs
Money_Bag_ID = "rbxassetid://71632786167654"
Table_ID = "rbxassetid://81831823492227"

-- Caching
Money_Bag = game:GetObjects(Money_Bag_ID)[1]
Money_Bag:Destroy()

Table = game:GetObjects(Table_ID)[1]
Table:Destroy()

-- Main
KiwiAPI = {}

-- API Variables
KiwiAPI.MoneyUpdating = false
KiwiAPI.FakeMoney = 0
KiwiAPI.DragDistance = 10

-- Misc Functions
KiwiAPI.Print = function(text: string, printType)
	if not text then
		return KiwiAPI.Print("⛔ KiwiAPI.Print --> no text.", error)
	end

	printType = printType or print

	printType(text, printType == error and 2 or "")
end

KiwiAPI.GetMoney = function()
	local leaderstats: Folder = LocalPlayer:WaitForChild("leaderstats")
	local Money: IntValue = leaderstats:WaitForChild("Money")

	if leaderstats and Money then
		return Money
	end

	return KiwiAPI.Print("⛔ KiwiAPI.GetMoney --> failed grabbing leaderstats & money.", error)
end

-- Important Functions
KiwiAPI.SetItemNetworkOwner = function(item: Model)
	if not item then
		return KiwiAPI.Print("⛔ KiwiAPI.SetItemNetworkOwner --> no item was inputted.", error)
	end

	item:AddTag("KiwiDragSkip")

	ReplicatedStorage.Shared.Network.RemoteEvent.RequestStartDrag:FireServer(item)
end

KiwiAPI.SetDragDistance = function(distance: number)
	if type(distance) ~= "number" then
		return KiwiAPI.Print("⛔ KiwiAPI.SetDragDistance --> distance must be a number.", error)
	end

	KiwiAPI.DragDistance = distance
end

KiwiAPI.AddFakeMoney = function(amount: number)
	if type(amount) ~= "number" then
		return KiwiAPI.Print("⛔ KiwiAPI.AddFakeMoney --> amount must be a number.", error)
	end

	local Money = KiwiAPI.GetMoney()

	KiwiAPI.MoneyUpdating = true
	KiwiAPI.FakeMoney += amount
	Money.Value += amount
	task.wait(0.1)
	KiwiAPI.MoneyUpdating = false
end

KiwiAPI.MakeSellable = function(item: Instance, amount: number, noMoneyBag: boolean)
	if not item then
		return KiwiAPI.Print("⛔ KiwiAPI.MakeSellable --> no item was inputted.", error)
	end

	if not amount then
		amount = 0

		KiwiAPI.Print("⚠️ KiwiAPI.MakeSellable --> no amount was inputted, set to 0.", warn)
	end

	if not item:HasTag("KiwiStorable") then
		KiwiAPI.MakeStorable(item)
	end

	local function HandleSell(part: BasePart)
		if part and part:IsA("BasePart") then
			part.CanTouch = true
			part.Touched:Connect(function(hit: BasePart)
				if (hit and hit.Name == "SellZone") and (item and item:IsDescendantOf(workspace)) then
					item:Destroy()

					ReplicatedStorage.StopDrag:Fire()

					if not noMoneyBag then
						local Money = KiwiAPI.GetMoney()
						local Collected = false

						local Money_Bag: Model = game:GetObjects(Money_Bag_ID)[1]

						if amount >= 45 then
							Money_Bag:ScaleTo(3)
						elseif amount >= 21 then
							Money_Bag:ScaleTo(1.98)
						elseif amount >= 1 or amount <= 0 then
							Money_Bag:ScaleTo(1.08)
						end

						local SellSound: Sound = SoundService.Sell:Clone()
						SellSound.Parent = Money_Bag
						SellSound:Play()

						Money_Bag.Parent = workspace.RuntimeItems
						Money_Bag.MoneyBag.CFrame = hit.CFrame * CFrame.Angles(0, math.rad(90), 0)
							+ Vector3.new(0, 3, 0)
						Money_Bag.MoneyBag.BillboardGui.TextLabel.Text = `${amount}`
						Money_Bag.MoneyBag.CollectPrompt.Triggered:Connect(function()
							if not Collected then
								Collected = true

								Money_Bag.Parent = nil
								Money_Bag.MoneyBag.Collect:Play()

								KiwiAPI.AddFakeMoney(amount)
							end
						end)
					end
				end
			end)
		end
	end

	HandleSell(item:IsA("Model") and item.PrimaryPart or item)
end

KiwiAPI.MakeCrafting = function(data)
	local defaults = {
		distance = 15,
		height = 2,
		items = {
			[1] = "GoldNugget",
			[2] = "",
			[3] = "",
			[4] = "",
			[5] = "",
			[6] = "",
			[7] = "",
			[8] = "",
			[9] = "",
		},
		reward = "rbxassetid://79581329552900",
		cost = 50,
		name = "Gold Bar",
		color = Color3.fromRGB(239, 184, 56),
		material = "Metal",
		transparency = 0,
		extra = function() end,
	}

	for key, value in pairs(defaults) do
		if data[key] == nil then
			data[key] = value
			KiwiAPI.Print(
				"⚠️ KiwiAPI.MakeCrafting --> property missing '"
					.. key
					.. "', replaced with '"
					.. tostring(value)
					.. "'.",
				warn
			)
		end
	end

	local HRP = Character:FindFirstChild("HumanoidRootPart")

	if Character and HRP then
		local forward = HRP.CFrame.LookVector
		local positionInFront = HRP.Position + (forward * data.distance)

		local raycastParams = RaycastParams.new()
		raycastParams.FilterDescendantsInstances = { Character }
		raycastParams.FilterType = Enum.RaycastFilterType.Exclude

		local origin = positionInFront + Vector3.new(0, 44, 0)
		local direction = Vector3.new(0, -200, 0)

		local result = workspace:Raycast(origin, direction, raycastParams)

		if result then
			local groundPosition = result.Position
			local spawnCFrame = CFrame.new(groundPosition)

			local Table: Model = game:GetObjects(Table_ID)[1]
			Table.Parent = workspace
			Table:PivotTo(spawnCFrame)

			local Touching = {}

			for _, grid: Part in Table.Grid:GetChildren() do
				local Expected = data.items[tonumber(grid.Name)]

				if Expected ~= "" then
					Touching[tonumber(grid.Name)] = {
						Status = false,
						Obj = nil,
					}

					grid.Touched:Connect(function(hit: BasePart)
						if hit and hit.Parent.Name == Expected and not hit.Parent:GetAttribute("Set") then
							hit.Parent:SetAttribute("Set", true)

							Touching[tonumber(grid.Name)].Status = true
							Touching[tonumber(grid.Name)].Obj = hit.Parent

							local TrueGrids = 0
							local RequiredCount = 0

							for _, data in pairs(Touching) do
								if data.Status then
									TrueGrids += 1
								end
							end

							for i = 1, 9 do
								if data.items[i] ~= "" then
									RequiredCount += 1
								end
							end

							if TrueGrids == RequiredCount then
								for _, data in pairs(Touching) do
									if data.Obj then
										data.Status = false
										data.Obj:Destroy()
									end
								end

								local Reward: Model = game:GetObjects(data.reward)[1]
								Reward.Parent = workspace.RuntimeItems
								Reward:PivotTo(Table.Grid["5"].CFrame + Vector3.new(0, data.height, 0))

								Reward.ObjectInfo.Title.Text = data.name

								for _, color: Part in Reward.PrimaryPart:GetChildren() do
									if color.Name == "Color" then
										color.Color = data.color
										color.Material = data.material
										color.Transparency = data.transparency
									end
								end

								for _, grid: Part in Table.Grid:GetChildren() do
									for _, touchingPart in pairs(workspace:GetPartsInPart(grid)) do
										if touchingPart.Parent and touchingPart.Parent:GetAttribute("Set") then
											touchingPart.Parent:SetAttribute("Set", nil)
										end
									end
								end

								if data.extra then
									data.extra()
								end

								_G.KiwiAPI.MakeSellable(Reward, data.cost)
							end
						end
					end)

					grid.TouchEnded:Connect(function(hit: BasePart)
						if hit and hit.Parent and hit.Parent.Name == Expected then
							hit.Parent:SetAttribute("Set", nil)

							Touching[tonumber(grid.Name)].Status = false
							Touching[tonumber(grid.Name)].Obj = nil
						end
					end)
				end
			end
		end

		return
	end

	KiwiAPI.Print("⛔ KiwiAPI.MakeCrafting --> failed grabbing character and humanoidrootpart.", error)
end

KiwiAPI.MakePickable = function(item: Model, shrink_multiplier: number)
	if not item then
		return KiwiAPI.Print("⛔ KiwiAPI.MakePickable --> no item was inputted.", error)
	end

	if not shrink_multiplier then
		shrink_multiplier = 1

		KiwiAPI.Print("⚠️ KiwiAPI.MakePickable --> no shrink_multiplier was inputted, set to 1.", warn)
	end

	item:AddTag("KiwiPickable")
	item:SetAttribute("Name", item.Name)
	item:SetAttribute("Size", shrink_multiplier)
end

KiwiAPI.MakeDraggable = function(item: Model)
	if not item then
		return KiwiAPI.Print("⛔ KiwiAPI.MakeDraggable --> no item was inputted.", error)
	end

	item:AddTag("DraggableObject")
end

KiwiAPI.MakeStorable = function(item: Model)
	if not item then
		return KiwiAPI.Print("⛔ KiwiAPI.MakeStorable --> no item was inputted.", error)
	end

	item:AddTag("KiwiStorable")
end

KiwiAPI.MakePickupFunction = function(item: Model, action)
	if not item then
		return KiwiAPI.Print("⛔ KiwiAPI.MakePickupFunction --> no item was inputted.", error)
	end

	if not action then
		return KiwiAPI.Print("⛔ KiwiAPI.MakePickupFunction --> no action was inputted.", error)
	end

	if ItemFunctions[item] then
		KiwiAPI.Print("⚠️ KiwiAPI.MakePickupFunction --> item already has a current function, overriding.", error)
	end

	item:AddTag("KiwiFunction")
	ItemFunctions[item] = action
end

-- Other
Money = KiwiAPI.GetMoney()
Money:GetPropertyChangedSignal("Value"):Connect(function()
	if KiwiAPI.MoneyUpdating then
		return
	end

	KiwiAPI.MoneyUpdating = true

	warn(KiwiAPI.FakeMoney)

	Money.Value += KiwiAPI.FakeMoney

	task.wait(0.1)

	KiwiAPI.MoneyUpdating = false
end)

-- Initialize
_G.KiwiAPI = KiwiAPI

KiwiAPI.Print("ℹ️  KiwiAPI --> " .. Ver .. (Ver == LatestVersion and " (latest)" or " (outdated)"), print)
KiwiAPI.Print("ℹ️  KiwiAPI --> " .. Upd, print)

if Ver ~= LatestVersion then
	KiwiAPI.Print("ℹ️  KiwiAPI --> latest version: " .. LatestVersion, warn)
end

-- Interact System
task.spawn(function()
	task.wait(5)

	local v2 = require(ReplicatedStorage.Shared.Remotes)
	local l_LocalPlayer_0 = Players.LocalPlayer
	local l_Shared_0 = ReplicatedStorage.Shared
	local v6 = require(l_Shared_0.Utils.DraggableObjectUtil)
	local l_isValidDraggableObject_0 = v6.isValidDraggableObject
	local v9 = require(ReplicatedStorage.Shared.SharedConstants.Tag)
	local v11 = require(ReplicatedStorage.Client.DataBanks.ActionData)
	local l_script_FirstAncestor_0 = ReplicatedStorage:FindFirstChild("Client")
	local l_FirstChild_0 = l_script_FirstAncestor_0.Handlers:FindFirstChild("ClientDraggableObjectHandler", true)
	local l_HoveringObject_0 = l_FirstChild_0.HoveringObject
	local v16 = require(l_script_FirstAncestor_0.Controllers.ActionController)
	local v17 = require(l_script_FirstAncestor_0.DataBanks.ClientActivatableObjectCallbacks)
	local l_ActivateObject_0 = v2.Promises.ActivateObject
	local v19 = nil
	local v20 = false
	local function activateObjectActionCallback(_, v22)
		if v22 ~= Enum.UserInputState.Begin then
			return Enum.ContextActionResult.Pass
		else
			if v19 then
				if v19:HasTag("KiwiFunction") then
					local Action = ItemFunctions[v19]
					if Action then
						Action()
					end

					return
				end

				l_ActivateObject_0
					:InvokeServer(v19)
					:andThen(function(v23, ...)
						if v23 then
							local v24 = v17[v19.Name]
							if v24 then
								v24(v19, ...)
							end
						end
					end)
					:timeout(10)
			end
			return Enum.ContextActionResult.Sink
		end
	end
	local function updateBind(v26)
		if v26 and not v20 then
			v16.bindAction(
				v11.Action.ActivateObject,
				activateObjectActionCallback,
				v11.ActionContext[v11.Action.ActivateObject],
				Enum.KeyCode.E,
				Enum.KeyCode.DPadLeft,
				3
			)
			v20 = true
		elseif not v26 and v20 then
			v16.unbindAction(v11.Action.ActivateObject)
			v20 = false
		end
		if v20 and v19 then
			local l_v19_Attribute_0 = v19:GetAttribute("ActivateText")
			v16.setButtonText(v11.Action.ActivateObject, l_v19_Attribute_0 or "Activate")
		end
	end
	local function update()
		if not l_LocalPlayer_0.Character then
			updateBind(false)
			return
		else
			local l_Value_0 = l_HoveringObject_0.Value
			if
				l_Value_0
				and l_isValidDraggableObject_0(l_Value_0)
				and l_Value_0:HasTag(v9.Activatable)
				and (
					not l_Value_0:GetAttribute("OwnerId")
						or l_Value_0:GetAttribute("OwnerId") == l_LocalPlayer_0.UserId
				)
			then
				v19 = l_Value_0
				if l_Value_0:HasTag("ShopItem") then
					v19 = nil
				end
			else
				v19 = nil
			end
			updateBind(v19 ~= nil)
			return
		end
	end
	local function onCharacterAdded(v31)
		local function handleChildChanged()
			update()
		end
		local v33 = v31.ChildAdded:Connect(handleChildChanged)
		local v34 = v31.ChildRemoved:Connect(handleChildChanged)
		v31.Destroying:Once(function()
			v33:Disconnect()
			v34:Disconnect()
			updateBind(false)
		end)
		update()
	end
	if l_LocalPlayer_0.Character then
		onCharacterAdded(l_LocalPlayer_0.Character)
	end
	l_HoveringObject_0.Changed:Connect(update)
	l_LocalPlayer_0.CharacterAdded:Connect(onCharacterAdded)
end)

-- Store System
task.spawn(function()
	local l_Players_0 = game:GetService("Players")
	local l_RunService_0 = game:GetService("RunService")
	local l_LocalPlayer_0 = l_Players_0.LocalPlayer
	local l_StoreItem_0 = ReplicatedStorage.Remotes.StoreItem
	local l_DropItem_0 = ReplicatedStorage.Remotes.DropItem
	local l_ClientDraggableObjectHandler_0 =
		ReplicatedStorage.Client.Handlers.DraggableItemHandlers.ClientDraggableObjectHandler
	local l_HoveringObject_0 = l_ClientDraggableObjectHandler_0.HoveringObject
	local l_Shared_0 = ReplicatedStorage.Shared
	local v11 = require(ReplicatedStorage.Client.Controllers.ActionController)
	local v12 = require(ReplicatedStorage.Client.DataBanks.ActionData)
	local v13 = require(l_Shared_0.Utils.DraggableObjectUtil)
	local l_isValidDraggableObject_0 = v13.isValidDraggableObject
	local l_isDraggableObjectWelded_0 = v13.isDraggableObjectWelded
	local v16 = nil

	local Sack = LocalPlayer.Backpack:WaitForChild("Sack", math.huge)
	local StoreLimit = Sack.SackSettings.Limit.Value

	local BillboardGui = Sack.BillboardGui
	local Clone = BillboardGui:Clone()
	Clone.Parent = Sack

	task.delay(1, function()
		BillboardGui:Destroy()
	end)

	local StoredLabel = Clone.TextLabel
	local FakeAmount = 0
	local RealAmount = 0

	local playerFolder = ReplicatedStorage:FindFirstChild("SackTools")
	if not playerFolder then
		playerFolder = Instance.new("Folder")
		playerFolder.Name = "SackTools"
		playerFolder.Parent = ReplicatedStorage
	end

	local function storeObjectActionCallback(_, v18)
		if v18 ~= Enum.UserInputState.Begin then
			return Enum.ContextActionResult.Pass
		else
			if v16 then
				if FakeAmount + RealAmount >= StoreLimit then
					return
				end

				if v16:HasTag("KiwiStorable") then
					Sack.Handle.Add:Play()
					FakeAmount += 1
					StoredLabel.Text = FakeAmount + RealAmount .. "/" .. StoreLimit
					v16.Parent = playerFolder

					return
				end

				RealAmount += 1
				StoredLabel.Text = FakeAmount + RealAmount .. "/" .. StoreLimit
				local Value = Instance.new("NumberValue", playerFolder)
				Value.Name = "ServerDrop"

				l_StoreItem_0:FireServer(v16)
			else
				local Dropped = false

				local items = playerFolder:GetChildren()
				for i = #items, 1, -1 do
					local itemToDrop = items[i]
					if
						itemToDrop:IsA("Model")
						and itemToDrop.PrimaryPart
						and LocalPlayer.Character
						and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
					then
						local LookVector = Sack.Handle.CFrame.LookVector
						local dropPosition = Sack.Handle.Position + (LookVector * 1.5) + Vector3.new(0, 0.35, 0)
						local forwardFacingCFrame = CFrame.new(dropPosition, dropPosition + LookVector)

						itemToDrop:SetPrimaryPartCFrame(forwardFacingCFrame)
						itemToDrop.Parent = workspace.RuntimeItems

						Dropped = true

						break
					elseif itemToDrop.Name == "ServerDrop" then
						itemToDrop:Destroy()

						break
					end
				end

				if Dropped then
					Sack.Handle.Empty:Play()
					FakeAmount -= 1
					StoredLabel.Text = FakeAmount + RealAmount .. "/" .. StoreLimit

					return
				end

				if RealAmount > 0 then
					RealAmount -= 1
					StoredLabel.Text = FakeAmount + RealAmount .. "/" .. StoreLimit
				end

				l_DropItem_0:FireServer()
			end
			return Enum.ContextActionResult.Sink
		end
	end
	local function updateStoreBinding(v20)
		if v20 ~= v11.isBound(v12.Action.StoreObject) then
			if v20 then
				v11.bindAction(
					v12.Action.StoreObject,
					storeObjectActionCallback,
					v12.ActionContext[v12.Action.StoreObject],
					Enum.KeyCode.F,
					Enum.KeyCode.ButtonY,
					v12.ActionPriority.Low
				)
				return
			else
				v11.unbindAction(v12.Action.StoreObject)
			end
		end
	end
	l_HoveringObject_0.Changed:Connect(function()
		if v11.isBound(v12.Action.StoreObject) then
			v11.setButtonText(v12.Action.StoreObject, v16 and "Store" or "Unstore")
		end
	end)
	local function onCharacterAdded(v22)
		local function updateStoreAction()
			local v23 = false
			local l_Tool_0 = v22:FindFirstChildOfClass("Tool")
			if l_Tool_0 and l_Tool_0.Name == "Sack" then
				v23 = true
			end
			updateStoreBinding(v23)
			if v23 and v11.isBound(v12.Action.StoreObject) then
				v11.setButtonText(v12.Action.StoreObject, v16 and "Store" or "Unstore")
			end
		end
		updateStoreAction()
		local function handleChildChanged()
			updateStoreAction()
		end
		local v27 = v22.ChildAdded:Connect(handleChildChanged)
		local v28 = v22.ChildRemoved:Connect(handleChildChanged)
		v22.Destroying:Once(function()
			v27:Disconnect()
			v28:Disconnect()
			updateStoreBinding(false)
		end)
	end
	local function onRenderStepped()
		v16 = nil
		local l_Value_0 = l_HoveringObject_0.Value
		if not l_Value_0 then
			return
		elseif not l_isValidDraggableObject_0(l_Value_0) then
			return
		elseif l_isDraggableObjectWelded_0(l_Value_0) then
			return
		else
			v16 = l_Value_0
			return
		end
	end
	l_RunService_0.RenderStepped:Connect(onRenderStepped)
	if l_LocalPlayer_0.Character then
		task.spawn(onCharacterAdded, l_LocalPlayer_0.Character)
	end
	l_LocalPlayer_0.CharacterAdded:Connect(onCharacterAdded)
end)

-- Pickup System
task.spawn(function()
	local l_LocalPlayer_0 = game:GetService("Players").LocalPlayer
	local l_HoveringObject_0 =
		ReplicatedStorage.Client.Handlers.DraggableItemHandlers.ClientDraggableObjectHandler.HoveringObject
	local v3 = require(ReplicatedStorage.Shared.Utils.DraggableObjectUtil)
	local l_isValidDraggableObject_0 = v3.isValidDraggableObject
	local l_isDraggableObjectWelded_0 = v3.isDraggableObjectWelded
	local v6 = require(ReplicatedStorage.Client.Controllers.ActionController)
	local v7 = require(ReplicatedStorage.Client.DataBanks.ActionData)
	local l_PickUpTool_0 = ReplicatedStorage.Remotes.Tool.PickUpTool
	local l_DropTool_0 = ReplicatedStorage.Remotes.Tool.DropTool
	local v10 = nil
	local function getCurrentlyHeldTool(v11)
		if not v11 then
			return nil
		else
			for _, v13 in v11:GetChildren() do
				if v13:IsA("Tool") and v13:HasTag("Droppable") then
					return v13
				end
			end
			return nil
		end
	end
	local function pickObjectActionCallback(_, v16)
		if v16 ~= Enum.UserInputState.Begin then
			return Enum.ContextActionResult.Pass
		else
			if v10 then
				if v10:HasTag("Special") then
					local toolMasterName = v10:GetAttribute("ToolName")
					if toolMasterName then
						local toolMaster = ReplicatedStorage:FindFirstChild(toolMasterName)
						if toolMaster and toolMaster:IsA("Tool") then
							local newTool = toolMaster:Clone()
							newTool.Name = v10:GetAttribute("OGName")
							newTool.Parent = l_LocalPlayer_0.Backpack
							
							v10:Destroy()
							return Enum.ContextActionResult.Sink
						end
					end

					return Enum.ContextActionResult.Pass
				end
				
				if v10:HasTag("KiwiPickable") and v10:IsA("Model") then
					local RandomNum = math.random(1, 100000000)
					local Clone: Model = v10:Clone()

					Clone:ScaleTo(v10:GetAttribute("Size"))

					v10.Name = v10:GetAttribute("Name") .. RandomNum
					v10.Parent = ReplicatedStorage.Assets
					v10:SetAttribute("OGName", v10.Name)

					local Tool = Instance.new("Tool", l_LocalPlayer_0.Backpack)
					Tool.Name = v10:GetAttribute("Name")
					Tool.CanBeDropped = false
					Tool:AddTag("Droppable")
					Tool:SetAttribute("Random", RandomNum)

					local Handle: BasePart = Clone.PrimaryPart
					Handle.Name = "Handle"
					Handle.Parent = Tool

					for _, part: Object in Clone:GetChildren() do
						if part:IsA("Model") or part:IsA("BasePart") then
							part.Parent = Handle
						end
					end

					Clone:Destroy()

					return
				end
				l_PickUpTool_0:FireServer(v10)
			end
			return Enum.ContextActionResult.Sink
		end
	end
	local function dropObjectActionCallback(_, v19)
		if v19 ~= Enum.UserInputState.Begin then
			return Enum.ContextActionResult.Pass
		else
			local v20 = getCurrentlyHeldTool(l_LocalPlayer_0.Character)
			if v20 then
				if v20:HasTag("Droppable") then
					if v20:HasTag("Special") then
						local modelMasterName = v20:GetAttribute("WorldModelName")
						if modelMasterName then
							local modelMaster = ReplicatedStorage:FindFirstChild(modelMasterName)
							if modelMaster and modelMaster:IsA("Model") then
								local modelToDrop = modelMaster:Clone()

								local Character = l_LocalPlayer_0.Character
								local forwardVector = Character.HumanoidRootPart.CFrame.LookVector
								local spawnPosition = Character.HumanoidRootPart.Position + (forwardVector * 7)
								
								local Price = v20:GetAttribute("Price")
								if Price then
									_G.KiwiAPI.MakeSellable(modelToDrop, Price)
								end
								
								modelToDrop.Name = modelMaster:GetAttribute("OGName") or modelMaster.Name 
								modelToDrop.Parent = workspace.RuntimeItems
								if modelToDrop.PrimaryPart then
									modelToDrop:SetPrimaryPartCFrame(CFrame.new(spawnPosition))
								end

								v20:Destroy()
								return Enum.ContextActionResult.Sink
							end
						end
						return Enum.ContextActionResult.Pass
					end
					
					local RandomAttribute = v20:GetAttribute("Random")

					if RandomAttribute then
						local Model = ReplicatedStorage:FindFirstChild(v20.Name .. RandomAttribute)
						if Model then
							local forwardVector = Character.HumanoidRootPart.CFrame.LookVector
							local spawnPosition = Character.HumanoidRootPart.Position + (forwardVector * 7)

							Model.Name = Model:GetAttribute("OGName")
							Model.Parent = workspace.RuntimeItems
							Model.PrimaryPart.CFrame = CFrame.new(spawnPosition)
						end
						
						v20:Destroy()
					else
						l_DropTool_0:FireServer(v20)
					end

					return
				end
			end
			return Enum.ContextActionResult.Sink
		end
	end
	local function updatePickBound(v22)
		local v23 = v6.isBound(v7.Action.PickUpObject)
		if v22 and not v23 then
			v6.bindAction(
				v7.Action.PickUpObject,
				pickObjectActionCallback,
				v7.ActionContext[v7.Action.PickUpObject],
				Enum.KeyCode.E,
				Enum.KeyCode.DPadLeft,
				v7.ActionPriority.Low
			)
			return
		else
			if not v22 and v23 then
				v6.unbindAction(v7.Action.PickUpObject)
			end
			return
		end
	end
	local function updateDropBound(v25)
		local v26 = v6.isBound(v7.Action.DropObject)
		if v25 and not v26 then
			v6.bindAction(
				v7.Action.DropObject,
				dropObjectActionCallback,
				v7.ActionContext[v7.Action.DropObject],
				Enum.KeyCode.Backspace,
				Enum.KeyCode.DPadLeft,
				v7.ActionPriority.Low
			)
			return
		else
			if not v25 and v26 then
				v6.unbindAction(v7.Action.DropObject)
			end
			return
		end
	end
	local function update()
		local l_Character_0 = l_LocalPlayer_0.Character
		if not l_Character_0 then
			updatePickBound(false)
			updateDropBound(false)
			return
		else
			local l_Value_0 = l_HoveringObject_0.Value
			local v30 = getCurrentlyHeldTool(l_Character_0)
			if
				l_Value_0
				and l_isValidDraggableObject_0(l_Value_0)
				and not l_isDraggableObjectWelded_0(l_Value_0)
				and l_Value_0:HasTag("ToolObject")
				and (
					not l_Value_0:GetAttribute("OwnerId")
						or l_Value_0:GetAttribute("OwnerId") == l_LocalPlayer_0.UserId
				)
			then
				v10 = l_Value_0
				if l_Value_0:HasTag("ShopItem") then
					v10 = nil
				end
			else
				v10 = nil
			end
			updatePickBound(v10 ~= nil)
			updateDropBound(v30 ~= nil)
			return
		end
	end
	local function onCharacterAdded(v32)
		local function handleChildChanged()
			update()
		end
		local v34 = v32.ChildAdded:Connect(handleChildChanged)
		local v35 = v32.ChildRemoved:Connect(handleChildChanged)
		v32.Destroying:Once(function()
			v34:Disconnect()
			v35:Disconnect()
			updatePickBound(false)
			updateDropBound(false)
		end)
		update()
	end
	if l_LocalPlayer_0.Character then
		onCharacterAdded(l_LocalPlayer_0.Character)
	end
	l_HoveringObject_0.Changed:Connect(update)
	l_LocalPlayer_0.CharacterAdded:Connect(onCharacterAdded)
end)

-- Dragging System
task.spawn(function()
	local script =
		game:GetService("ReplicatedStorage").Client.Handlers.DraggableItemHandlers.ClientDraggableObjectHandler
	local l_ReplicatedStorage_0 = game:GetService("ReplicatedStorage")
	local l_Players_0 = game:GetService("Players")
	local l_RunService_0 = game:GetService("RunService")
	local v7 = require(l_ReplicatedStorage_0.Shared.Remotes)
	local l_RequestStartDrag_0 = v7.Events.RequestStartDrag
	local l_UpdateDrag_0 = v7.Events.UpdateDrag
	local l_RequestStopDrag_0 = v7.Events.RequestStopDrag
	local l_RequestWeld_0 = v7.Events.RequestWeld
	local l_RequestUnweld_0 = v7.Events.RequestUnweld
	local l_StartPour_0 = v7.Events.StartPour
	local v14 = require(l_ReplicatedStorage_0.Shared.SharedConstants.FeatureFlags)
	local l_HoveringObject_0 = script:FindFirstChild("HoveringObject")
	local l_DraggingObject_0 = script:FindFirstChild("DraggingObject")
	local v18 = require(game:GetService("ReplicatedStorage").Client.Controllers.ActionController)
	local v19 = require(game:GetService("ReplicatedStorage").Client.Controllers.ActionController.InputCategorizer)
	local v20 = require(l_ReplicatedStorage_0.Shared.Utils.DraggableObjectUtil)
	local v21 = require(l_ReplicatedStorage_0.Shared.Utils.TagUtil)
	local v22 = require(l_ReplicatedStorage_0.Shared.SharedConstants.Tag)
	local v23 = require(l_ReplicatedStorage_0.Client.DataBanks.ActionData)
	local v24 = require(script.RotationGizmo)
	local l_isValidDraggableObject_0 = v20.isValidDraggableObject
	local l_isValidWeldTarget_0 = v20.isValidWeldTarget
	local l_isDraggableObjectWelded_0 = v20.isDraggableObjectWelded
	local l_findFirstAncestorOfClassWithTag_0 = v21.findFirstAncestorOfClassWithTag
	local l_LocalPlayer_0 = l_Players_0.LocalPlayer
	local l_CurrentCamera_0 = workspace.CurrentCamera
	local l_DragHighlight_0 = script:FindFirstChild("DragHighlight")
	l_DragHighlight_0.Parent = script
	local v33 = false
	local v34 = nil
	local v35 = nil
	local v36 = nil
	local v37 = nil
	local v38 = false
	local v39 = 0
	local l_X_0 = Enum.Axis.X
	local v41 = nil
	local v42 = nil
	local v43 = nil
	local v44 = nil
	local v45 = nil
	local function v49()
		local l_Position_0 = l_CurrentCamera_0.CFrame.Position
		local v47 = l_CurrentCamera_0.CFrame.LookVector * 10
		local v48 = RaycastParams.new()
		v48.FilterType = Enum.RaycastFilterType.Exclude
		v48.FilterDescendantsInstances = {
			l_LocalPlayer_0.Character,
		}
		return workspace:Raycast(l_Position_0, v47, v48)
	end
	local function v52()
		local v50 = v49()
		if v50 and v50.Instance then
			local v51 = l_findFirstAncestorOfClassWithTag_0(v50.Instance, "Model", v22.DraggableObject)
			if v51 and l_isValidDraggableObject_0(v51) then
				if not v33 and v37 then
					v37.Enabled = l_HoveringObject_0.Value == v51
				end
				v37 = v51:FindFirstChild("ObjectInfo")
				return v51
			end
		elseif v37 then
			v37.Enabled = false
			v37 = nil
		end
		return nil
	end
	local function v61(v53)
		if not v53 then
			return nil
		else
			local l_v53_BoundingBox_0 = v53:GetBoundingBox()
			local l_v53_ExtentsSize_0 = v53:GetExtentsSize()
			local v56 = OverlapParams.new()
			v56.FilterType = Enum.RaycastFilterType.Exclude
			v56.FilterDescendantsInstances = {
				v53,
			}
			local l_workspace_PartBoundsInBox_0 =
				workspace:GetPartBoundsInBox(l_v53_BoundingBox_0, l_v53_ExtentsSize_0 * 1.05, v56)
			local v58 = nil
			for _, v60 in l_workspace_PartBoundsInBox_0 do
				if v60:IsA("BasePart") and l_isValidWeldTarget_0(v60) then
					return v60
				end
			end
			return v58
		end
	end
	local function v67()
		if v34 and v34.PrimaryPart then
			l_RequestStopDrag_0:FireServer()
			l_StartPour_0:FireServer(false, v34)
			if v44 then
				v44:Destroy()
			end
			if v45 then
				v45:Destroy()
			end
			if v43 then
				v43:Destroy()
			end
		end
		if l_DragHighlight_0 then
			l_DragHighlight_0.Adornee = nil
		end
		v33 = false
		v34 = nil
		v44 = nil
		v45 = nil
		v43 = nil
		v18.unbindAction(v23.Action.PourLiquid)
		v38 = false
		v39 = 0
		v41 = nil
		if v42 then
			v42:destroy()
		end
	end
	local function v76(_, v75)
		if v75 ~= Enum.UserInputState.Begin then
			return Enum.ContextActionResult.Pass
		elseif v33 then
			if v36 then
				l_RequestWeld_0:FireServer(v34, v36)

				task.wait(0.1)

				if v34.PrimaryPart and not v34.PrimaryPart:FindFirstChild("DragWeldConstraint") then
					local DragWeldConstraint = Instance.new("WeldConstraint", v34.PrimaryPart)
					DragWeldConstraint.Part0 = v34.PrimaryPart
					DragWeldConstraint.Part1 = v36
					DragWeldConstraint.Name = "DragWeldConstraint"

					v67()
				end
			end
			return Enum.ContextActionResult.Pass
		else
			if v35 then
				l_RequestUnweld_0:FireServer(v35)

				task.wait(0.1)

				local DragWeldConstraint = v35.PrimaryPart:FindFirstChild("DragWeldConstraint")
				if DragWeldConstraint then
					DragWeldConstraint:Destroy()
				end
			end
			return Enum.ContextActionResult.Sink
		end
	end
	local function v79(_, v78)
		if v78 == Enum.UserInputState.Begin then
			if l_X_0 == Enum.Axis.X then
				l_X_0 = Enum.Axis.Y
			elseif l_X_0 == Enum.Axis.Y then
				l_X_0 = Enum.Axis.Z
			elseif l_X_0 == Enum.Axis.Z then
				l_X_0 = Enum.Axis.X
			end
			if v42 then
				v42:setCurrentAxis(l_X_0)
			end
			v39 = tick()
			return Enum.ContextActionResult.Sink
		else
			return Enum.ContextActionResult.Pass
		end
	end
	local function v83(_, v81, v82)
		if v19.getLastInputCategory() == "Gamepad" and v82.UserInputType == Enum.UserInputType.MouseButton1 then
			return Enum.ContextActionResult.Pass
		else
			if v81 == Enum.UserInputState.Begin then
				if v35 then
					if l_isDraggableObjectWelded_0(v35) then
						return Enum.ContextActionResult.Pass
					else
						l_StartPour_0:FireServer(true, v35)
						return Enum.ContextActionResult.Sink
					end
				end
			elseif v81 == Enum.UserInputState.End and v33 then
				l_StartPour_0:FireServer(false, v35)
				return Enum.ContextActionResult.Sink
			end
			return Enum.ContextActionResult.Pass
		end
	end
	local function v90(v84)
		if not v33 or not v34 or not v34.PrimaryPart then
			return
		else
			local l_CFrame_0 = l_CurrentCamera_0.CFrame
			local l_LookVector_0 = l_CFrame_0.LookVector
			local v87 = l_CFrame_0.Position + l_LookVector_0 * KiwiAPI.DragDistance
			local l_v34_Pivot_0 = v34:GetPivot()
			if v18.isBound(v23.Action.RotateObject) and v18.isPressed(v23.Action.RotateObject) then
				v38 = true
				v39 = tick()
				if not v41 then
					v41 = l_v34_Pivot_0 - l_v34_Pivot_0.Position
				elseif v41 then
					local v89 = v84 * 4
					if l_X_0 == Enum.Axis.X then
						v41 = v41 * CFrame.Angles(v89, 0, 0)
					elseif l_X_0 == Enum.Axis.Y then
						v41 = v41 * CFrame.Angles(0, v89, 0)
					elseif l_X_0 == Enum.Axis.Z then
						v41 = v41 * CFrame.Angles(0, 0, v89)
					end
				end
			end
			if v14.Experimental.ServerOwnedDragging or v34:HasTag(v22.RopedObject) then
				l_UpdateDrag_0:FireServer(l_LookVector_0, v87)
				return
			else
				if v44 and v45 then
					v44.Position = v87
					if not v38 then
						v45.CFrame = CFrame.new(v87, v87 + l_LookVector_0)
						return
					else
						v45.CFrame = CFrame.new(v87) * v41
					end
				end
				return
			end
		end
	end
	local function v94(v91, _, v93)
		if not v91 or not l_isValidDraggableObject_0(v93) then
			v33 = false
			v34 = nil
			return
		else
			if v93:HasTag("KiwiDragSkip") then
				return
			end

			v33 = true
			v34 = v93
			v38 = false
			v42 = v24.new(v93)
			if v93:HasTag("LiquidContainer") then
				v18.bindAction(
					v23.Action.PourLiquid,
					v83,
					v23.ActionContext[v23.Action.PourLiquid],
					Enum.KeyCode.F,
					Enum.KeyCode.DPadRight,
					v23.ActionPriority.Low
				)
			end
			if not v14.Experimental.ServerOwnedDragging then
				if v93:HasTag(v22.RopedObject) then
					return
				else
					v43 = Instance.new("Attachment")
					v44 = Instance.new("AlignPosition")
					v45 = Instance.new("AlignOrientation")
					if v34 and v43 and v44 and v45 then
						v43.Name = "DragAttachment"
						v43.Parent = v34.PrimaryPart
						v44.Name = "DragAlignPosition"
						v44.Mode = Enum.PositionAlignmentMode.OneAttachment
						v44.ApplyAtCenterOfMass = false
						v44.MaxForce = math.huge
						v44.Responsiveness = 50
						v44.Attachment0 = v43
						v44.Parent = v34.PrimaryPart
						v44.Position = v34.PrimaryPart.Position
						v45.Name = "DragAlignOrientation"
						v45.Mode = Enum.OrientationAlignmentMode.OneAttachment
						v45.MaxTorque = math.huge
						v45.Responsiveness = 50
						v45.Attachment0 = v43
						v45.Parent = v34.PrimaryPart
					end
				end
			end
			return
		end
	end
	local function v97(_, _) end
	local function v73(_, v70, v71)
		if v19.getLastInputCategory() == "Gamepad" and v71.UserInputType == Enum.UserInputType.MouseButton1 then
			return Enum.ContextActionResult.Pass
		else
			if v70 == Enum.UserInputState.Begin then
				if v35 then
					if l_isDraggableObjectWelded_0(v35) then
						return Enum.ContextActionResult.Pass
					else
						local l_v35_0 = v35
						if not v33 and l_LocalPlayer_0.Character then
							v94(true, nil, l_v35_0)
							l_RequestStartDrag_0:FireServer(l_v35_0)
						end
						return Enum.ContextActionResult.Sink
					end
				end
			elseif v70 == Enum.UserInputState.End and v33 then
				v67()
				return Enum.ContextActionResult.Sink
			end
			return Enum.ContextActionResult.Pass
		end
	end
	local function v105()
		local l_Character_0 = l_LocalPlayer_0.Character
		if not l_Character_0 then
			return
		else
			local l_Humanoid_0 = l_Character_0:FindFirstChildOfClass("Humanoid")
			if not l_Humanoid_0 or l_Humanoid_0 and l_Humanoid_0.Sit then
				return
			else
				local v100 = false
				local v101 = false
				local v102 = false
				local v103 = "Drag"
				local v104 = "Weld"
				if v33 then
					v103 = "Drop"
					v100 = true
					v102 = true
					if v36 then
						v101 = true
					end
				elseif v35 then
					if l_isDraggableObjectWelded_0(v35) then
						v104 = "Unweld"
						v101 = true
					else
						v100 = true
					end
				end
				if v35 and v35:GetAttribute("OwnerId") and v35:GetAttribute("OwnerId") ~= l_LocalPlayer_0.UserId then
					v100 = false
				end
				if v18.isBound(v23.Action.DragObject) ~= v100 then
					if v100 then
						v18.bindAction(
							v23.Action.DragObject,
							v73,
							v23.ActionContext[v23.Action.DragObject],
							Enum.UserInputType.MouseButton1,
							Enum.KeyCode.ButtonR2,
							v23.ActionPriority.High
						)
					else
						v18.unbindAction(v23.Action.DragObject)
					end
				end
				if v18.isBound(v23.Action.RotateObject) ~= v102 then
					if v102 then
						v18.bindAction(
							v23.Action.RotateObject,
							v23.noOp,
							v23.ActionContext[v23.Action.RotateObject],
							Enum.KeyCode.R,
							Enum.KeyCode.ButtonL2,
							v23.ActionPriority.Low
						)
					else
						v18.unbindAction(v23.Action.RotateObject)
					end
				end
				if v18.isBound(v23.Action.ChangeRotationAxis) ~= v102 then
					if v102 then
						v18.bindAction(
							v23.Action.ChangeRotationAxis,
							v79,
							v23.ActionContext[v23.Action.ChangeRotationAxis],
							Enum.KeyCode.T,
							Enum.KeyCode.ButtonY,
							v23.ActionPriority.Low
						)
					else
						v18.unbindAction(v23.Action.ChangeRotationAxis)
					end
				end
				if v101 ~= v18.isBound(v23.Action.WeldObject) then
					if v101 then
						v18.bindAction(
							v23.Action.WeldObject,
							v76,
							v23.ActionContext[v23.Action.WeldObject],
							Enum.KeyCode.Z,
							Enum.KeyCode.ButtonX,
							v23.ActionPriority.Medium
						)
					else
						v18.unbindAction(v23.Action.WeldObject)
					end
				end
				if v18.isBound(v23.Action.DragObject) then
					v18.setButtonText(v23.Action.DragObject, v103)
				end
				if v18.isBound(v23.Action.WeldObject) then
					v18.setButtonText(v23.Action.WeldObject, v104)
				end
				return
			end
		end
	end
	local function v106()
		if v33 and v34 then
			l_DragHighlight_0.Adornee = v34
			if v34:HasTag("ShopItem") then
				l_DragHighlight_0.OutlineColor = Color3.fromRGB(255, 247, 0)
			else
				l_DragHighlight_0.OutlineColor = Color3.fromRGB(255, 255, 255)
			end
			if v42 then
				v42:setParent(l_CurrentCamera_0)
			end
		elseif v35 then
			l_DragHighlight_0.Adornee = v35
			if v35:HasTag("ShopItem") then
				l_DragHighlight_0.OutlineColor = Color3.fromRGB(255, 247, 0)
			else
				l_DragHighlight_0.OutlineColor = Color3.fromRGB(255, 255, 255)
			end
			if v42 then
				v42:setParent(nil)
			end
		else
			l_DragHighlight_0.Adornee = nil
			if v42 then
				v42:setParent(nil)
			end
		end
		if v42 then
			if tick() > v39 + 1.5 then
				v42:hide()
				return
			else
				v42:show()
			end
		end
	end
	(function()
		l_RequestWeld_0.OnClientEvent:Connect(function(v107)
			if v107 then
				v67()
			end
		end)
		l_RequestUnweld_0.OnClientEvent:Connect(v97)
		local StopDrag = Instance.new("BindableEvent", l_ReplicatedStorage_0)
		StopDrag.Name = "StopDrag"
		StopDrag.Event:Connect(function()
			v67()
		end)
		l_RunService_0.RenderStepped:Connect(function(v108)
			v35 = v52()
			v36 = v61(l_DraggingObject_0.Value)
			v90(v108)
			v105()
			v106()
			l_HoveringObject_0.Value = if v35 ~= v34 then v35 else nil
			l_DraggingObject_0.Value = v34
		end)
	end)()
end)
